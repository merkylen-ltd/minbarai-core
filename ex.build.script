#!/bin/bash

# 🚀 Ultra-Low Latency VoiceFlow Relay Deployment Script
# Deploys VoiceFlow Relay to Google Cloud Run with optimized settings

set -e  # Exit on any error

# Configuration - Update these values for your project
PROJECT_ID="gen-lang-client-0842740671"
REGION="europe-west3"  # Choose region closest to your users
SERVICE_NAME="voiceflow-relay"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if gcloud is installed
    if ! command -v gcloud &> /dev/null; then
        print_error "gcloud CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check if docker is installed
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install it first."
        exit 1
    fi
    
    # Check if openssl is installed
    if ! command -v openssl &> /dev/null; then
        print_error "OpenSSL is not installed. Please install it first."
        exit 1
    fi
    
    # Check if service account file exists
    if [ ! -f "gen-lang-client-0842740671-bbddcfe68682.json" ]; then
        print_error "Service account file 'gen-lang-client-0842740671-bbddcfe68682.json' not found."
        print_status "Please ensure the service account JSON file is in the project root."
        exit 1
    fi
    
    print_success "All prerequisites met!"
}

# Configure gcloud
configure_gcloud() {
    print_status "Configuring gcloud..."
    
    # Set project
    gcloud config set project $PROJECT_ID
    
    # Configure docker authentication
    gcloud auth configure-docker --quiet
    
    print_success "gcloud configured!"
}

# Generate secure WebSocket bearer token
generate_bearer_token() {
    print_status "Generating secure WebSocket bearer token..."
    
    # Generate a new bearer token
    WS_BEARER=$(openssl rand -hex 32)
    
    print_success "Bearer token generated: ${WS_BEARER:0:8}..."
}

# Build Docker image
build_image() {
    print_status "Building Docker image..."
    
    # Build with latest tag
    docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .
    
    # Also tag with commit SHA if available
    if [ ! -z "$COMMIT_SHA" ]; then
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:latest gcr.io/$PROJECT_ID/$SERVICE_NAME:$COMMIT_SHA
    fi
    
    print_success "Docker image built successfully!"
}

# Push image to Container Registry
push_image() {
    print_status "Pushing image to Container Registry..."
    
    docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    if [ ! -z "$COMMIT_SHA" ]; then
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$COMMIT_SHA
    fi
    
    print_success "Image pushed to Container Registry!"
}

# Deploy to Cloud Run
deploy_to_cloud_run() {
    print_status "Deploying to Cloud Run with ultra-low latency settings..."
    
    # Use commit SHA if available, otherwise use latest
    IMAGE_TAG=${COMMIT_SHA:-latest}
    
    gcloud run deploy $SERVICE_NAME \
        --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$IMAGE_TAG \
        --platform managed \
        --region $REGION \
        --allow-unauthenticated \
        --port 8080 \
        --memory 1Gi \
        --cpu 1 \
        --min-instances 0 \
        --max-instances 10 \
        --concurrency 100 \
        --timeout 3600 \
        --set-env-vars NODE_ENV=production \
        --set-env-vars GOOGLE_APPLICATION_CREDENTIALS=/app/gen-lang-client-0842740671-bbddcfe68682.json \
        --set-env-vars WS_BEARER=$WS_BEARER \
        --quiet
    
    print_success "Deployed to Cloud Run successfully!"
}

# Get service information
get_service_info() {
    print_status "Retrieving service information..."
    
    # Get service URL
    SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
    
    # Get service status
    SERVICE_STATUS=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.conditions[0].status)')
    
    print_success "Service deployed successfully!"
    echo ""
    echo "=================================================="
    echo "🚀 DEPLOYMENT COMPLETE - COPY THE TOKEN BELOW!"
    echo "=================================================="
    echo ""
    echo "🌐 Service URL: $SERVICE_URL"
    echo ""
    echo "🔑 WebSocket Bearer Token (COPY THIS):"
    echo "   $WS_BEARER"
    echo ""
    echo "📍 Region: $REGION"
    echo "📊 Status: $SERVICE_STATUS"
    echo ""
    echo "📝 Frontend Configuration:"
    echo "   NEXT_PUBLIC_VOICEFLOW_RELAY_URL=$SERVICE_URL"
    echo "   WS_BEARER=$WS_BEARER"
    echo ""
    echo "🧪 Test WebSocket Connection:"
    echo "   wscat -c $SERVICE_URL -H \"Sec-WebSocket-Protocol: bearer, $WS_BEARER\""
    echo ""
    echo "📈 Monitor Logs:"
    echo "   gcloud logs read --service=$SERVICE_NAME --region=$REGION --limit=50"
    echo ""
    echo "=================================================="
    echo "⚠️  IMPORTANT: Save this token securely!"
    echo "   Users need this token to access the service."
    echo "=================================================="
}

# Main deployment function
main() {
    echo "🚀 Starting Ultra-Low Latency VoiceFlow Relay Deployment"
    echo "=================================================="
    echo ""
    
    # Check if PROJECT_ID is set
    if [ "$PROJECT_ID" = "your-project-id" ]; then
        print_error "Please update PROJECT_ID in the script before running."
        print_status "Edit this script and set PROJECT_ID to your actual Google Cloud project ID."
        exit 1
    fi
    
    # Get commit SHA from git if available
    if command -v git &> /dev/null && git rev-parse --git-dir > /dev/null 2>&1; then
        COMMIT_SHA=$(git rev-parse --short HEAD)
        print_status "Using commit SHA: $COMMIT_SHA"
    fi
    
    # Run deployment steps
    check_prerequisites
    configure_gcloud
    generate_bearer_token
    build_image
    push_image
    deploy_to_cloud_run
    get_service_info
    
    echo ""
    print_success "🎉 Deployment completed successfully!"
    print_status "Your VoiceFlow Relay service is now running with ultra-low latency optimization."
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "Ultra-Low Latency VoiceFlow Relay Deployment Script"
        echo ""
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  --help, -h     Show this help message"
        echo "  --dry-run      Show what would be deployed without actually deploying"
        echo ""
        echo "Configuration:"
        echo "  Edit this script to set PROJECT_ID, REGION, and SERVICE_NAME"
        echo ""
        echo "Prerequisites:"
        echo "  - gcloud CLI installed and authenticated"
        echo "  - Docker installed and running"
        echo "  - Service account JSON file in project root"
        echo "  - Required Google Cloud APIs enabled"
        exit 0
        ;;
    --dry-run)
        print_status "Dry run mode - showing configuration without deploying"
        echo ""
        echo "Project ID: $PROJECT_ID"
        echo "Region: $REGION"
        echo "Service Name: $SERVICE_NAME"
        echo "Image: gcr.io/$PROJECT_ID/$SERVICE_NAME:latest"
        echo ""
        print_status "To deploy, run: $0"
        exit 0
        ;;
    *)
        main
        ;;
esac
