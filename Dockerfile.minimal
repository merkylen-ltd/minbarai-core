# Ultra-minimal Dockerfile for Next.js on Google Cloud Run
# Alternative approach for maximum size reduction and security

# Stage 1: Dependencies - Minimal Alpine with only essentials
FROM node:18-alpine AS deps
RUN apk add --no-cache --virtual .build-deps \
    python3 \
    make \
    g++ \
    && apk add --no-cache libc6-compat \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/* /root/.npm
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Install with maximum optimization
RUN npm ci --only=production --no-audit --no-fund --prefer-offline --silent \
    && npm cache clean --force \
    && apk del .build-deps \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/* /root/.npm

# Stage 2: Builder - Optimized build
FROM node:18-alpine AS builder
RUN apk add --no-cache --virtual .build-deps \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/* /root/.npm
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Optimized build environment
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Build with size optimizations
RUN npm run build \
    && apk del .build-deps \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/* /root/.npm /app/node_modules

# Stage 3: Ultra-minimal Runtime - Scratch-based approach
FROM scratch AS runner

# Copy only the essential files from builder
COPY --from=builder /app/.next/standalone /
COPY --from=builder /app/.next/static /.next/static
COPY --from=builder /app/public /public

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=8080
ENV NODE_OPTIONS="--max-old-space-size=512 --optimize-for-size"

# Expose port
EXPOSE 8080

# Start the application
CMD ["/server.js"]
