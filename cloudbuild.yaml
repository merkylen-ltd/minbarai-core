# Google Cloud Build CI/CD Pipeline for MinberAI
# Full pipeline: lint, test, security, build, deploy
# Branch-based deployment: dev → minbarai-dev, main → minbarai-pro

steps:
  # Step 1: Install dependencies with caching
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['ci', '--only=production', '--no-audit', '--no-fund']
    env:
      - 'NODE_ENV=production'
    id: 'install-prod-deps'

  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['ci', '--no-audit', '--no-fund']
    env:
      - 'NODE_ENV=development'
    id: 'install-dev-deps'

  # Step 2: Lint check
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['run', 'lint']
    id: 'lint'
    waitFor: ['install-dev-deps']

  # Step 3: Type check
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['run', 'type-check']
    id: 'type-check'
    waitFor: ['install-dev-deps']

  # Step 4: Security audit
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['audit', '--audit-level=high', '--production']
    id: 'security-audit'
    waitFor: ['install-prod-deps']

  # Step 5: Run tests
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['run', 'test', '--', '--coverage', '--watchAll=false']
    id: 'test'
    waitFor: ['install-dev-deps']

  # Step 6: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/minberai:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/minberai:latest',
      '--build-arg', 'NEXT_PUBLIC_SUPABASE_URL=${_NEXT_PUBLIC_SUPABASE_URL}',
      '--build-arg', 'NEXT_PUBLIC_SUPABASE_ANON_KEY=${_NEXT_PUBLIC_SUPABASE_ANON_KEY}',
      '--build-arg', 'NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${_NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}',
      '--build-arg', 'NEXT_PUBLIC_STRIPE_PRICE_ID=${_NEXT_PUBLIC_STRIPE_PRICE_ID}',
      '--build-arg', 'NEXT_PUBLIC_VOICEFLOW_WS_URL=${_NEXT_PUBLIC_VOICEFLOW_WS_URL}',
      '--build-arg', 'NEXT_PUBLIC_VOICEFLOW_WS_TOKEN=${_NEXT_PUBLIC_VOICEFLOW_WS_TOKEN}',
      '--build-arg', 'NEXT_PUBLIC_SITE_URL=${_NEXT_PUBLIC_SITE_URL}',
      '--build-arg', 'NEXTAUTH_URL=${_NEXTAUTH_URL}',
      '.'
    ]
    id: 'docker-build'
    waitFor: ['lint', 'type-check', 'security-audit', 'test']

  # Step 7: Security scan with Trivy
  - name: 'aquasec/trivy:latest'
    args: [
      'image',
      '--severity', 'HIGH,CRITICAL',
      '--exit-code', '1',
      '--format', 'table',
      'gcr.io/$PROJECT_ID/minberai:$COMMIT_SHA'
    ]
    id: 'trivy-scan'
    waitFor: ['docker-build']

  # Step 8: Push to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/minberai:$COMMIT_SHA']
    id: 'push-image'
    waitFor: ['trivy-scan']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/minberai:latest']
    id: 'push-latest'
    waitFor: ['push-image']

  # Step 9: Deploy to Development (dev branch)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', '${_SERVICE_NAME_DEV}',
      '--image', 'gcr.io/$PROJECT_ID/minberai:$COMMIT_SHA',
      '--platform', 'managed',
      '--region', '${_REGION}',
      '--allow-unauthenticated',
      '--port', '8080',
      '--memory', '1Gi',
      '--cpu', '1',
      '--min-instances', '0',
      '--max-instances', '10',
      '--concurrency', '100',
      '--timeout', '300',
      '--set-env-vars', 'NODE_ENV=development',
      '--set-secrets', 'STRIPE_SECRET_KEY=STRIPE_SECRET_KEY:latest',
      '--set-secrets', 'STRIPE_WEBHOOK_SECRET=STRIPE_WEBHOOK_SECRET:latest',
      '--set-secrets', 'SUPABASE_SERVICE_ROLE_KEY=SUPABASE_SERVICE_ROLE_KEY:latest',
      '--service-account', 'minberai-service-account@$PROJECT_ID.iam.gserviceaccount.com',
      '--quiet'
    ]
    id: 'deploy-dev'
    waitFor: ['push-latest']

  # Step 10: Deploy to Production (main branch only)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          gcloud run deploy ${_SERVICE_NAME_PROD} \
            --image gcr.io/$PROJECT_ID/minberai:$COMMIT_SHA \
            --platform managed \
            --region ${_REGION} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 50 \
            --concurrency 100 \
            --timeout 300 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars NEXT_PUBLIC_SITE_URL=https://${_CUSTOM_DOMAIN} \
            --set-env-vars NEXTAUTH_URL=https://${_CUSTOM_DOMAIN} \
            --set-secrets STRIPE_SECRET_KEY=STRIPE_SECRET_KEY:latest \
            --set-secrets STRIPE_WEBHOOK_SECRET=STRIPE_WEBHOOK_SECRET:latest \
            --set-secrets SUPABASE_SERVICE_ROLE_KEY=SUPABASE_SERVICE_ROLE_KEY:latest \
            --service-account minberai-service-account@$PROJECT_ID.iam.gserviceaccount.com \
            --quiet
        else
          echo "Skipping production deployment for branch: $BRANCH_NAME"
        fi
    id: 'deploy-prod'
    waitFor: ['push-latest']

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  substitution_option: 'ALLOW_LOOSE'

# Substitution variables
substitutions:
  _REGION: 'europe-west1'
  _SERVICE_NAME_PROD: 'minbarai-pro'
  _SERVICE_NAME_DEV: 'minbarai-dev'
  _CUSTOM_DOMAIN: 'minbarai.com'
  _NEXT_PUBLIC_SUPABASE_URL: 'https://your-project.supabase.co'
  _NEXT_PUBLIC_SUPABASE_ANON_KEY: 'your-anon-key'
  _NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: 'pk_live_your-key'
  _NEXT_PUBLIC_STRIPE_PRICE_ID: 'price_your-price-id'
  _NEXT_PUBLIC_VOICEFLOW_WS_URL: 'wss://your-voiceflow-url'
  _NEXT_PUBLIC_VOICEFLOW_WS_TOKEN: 'your-voiceflow-token'
  _NEXT_PUBLIC_SITE_URL: 'https://minbarai.com'
  _NEXTAUTH_URL: 'https://minbarai.com'

# Build triggers configuration
# To set up automatic builds, run:
# gcloud builds triggers create github \
#   --repo-name=MinberAI \
#   --repo-owner=your-github-username \
#   --branch-pattern="^dev$" \
#   --build-config=cloudbuild.yaml \
#   --substitutions=_SERVICE_NAME_DEV=minbarai-dev
#
# gcloud builds triggers create github \
#   --repo-name=MinberAI \
#   --repo-owner=your-github-username \
#   --branch-pattern="^main$" \
#   --build-config=cloudbuild.yaml \
#   --substitutions=_SERVICE_NAME_PROD=minbarai-pro